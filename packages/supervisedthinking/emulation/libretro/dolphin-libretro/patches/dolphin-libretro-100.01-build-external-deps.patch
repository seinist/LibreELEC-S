--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -556,23 +556,17 @@
   add_subdirectory(Externals/Bochs_disasm)
 endif()
 add_subdirectory(Externals/cpp-optparse)
-find_package(fmt 6.0)
-if(fmt_FOUND)
-  message(STATUS "Using shared fmt ${fmt_VERSION}")
-else()
-  check_vendoring_approved(fmt)
-  message(STATUS "Using static fmt from Externals")
-  add_subdirectory(Externals/fmt EXCLUDE_FROM_ALL)
-endif()
+
+check_vendoring_approved(fmt)
+message(STATUS "Using static fmt from Externals")
+add_subdirectory(Externals/fmt EXCLUDE_FROM_ALL)
+
 add_subdirectory(Externals/glslang)
 add_subdirectory(Externals/imgui)
 
-find_package(pugixml)
-if(NOT pugixml_FOUND)
-  check_vendoring_approved(pugixml)
-  message(STATUS "Using static pugixml from Externals")
-  add_subdirectory(Externals/pugixml)
-endif()
+check_vendoring_approved(pugixml)
+message(STATUS "Using static pugixml from Externals")
+add_subdirectory(Externals/pugixml)
 
 if(USE_SHARED_ENET)
   check_lib(ENET libenet enet enet/enet.h QUIET)
@@ -617,19 +611,9 @@
 endif()
 
 # macOS ships with liblzma.dylib but no headers, so check for the headers too
-find_package(LibLZMA)
-check_include_file(lzma.h HAVE_LZMA_H)
-if(LIBLZMA_FOUND AND HAVE_LZMA_H)
-  message(STATUS "Using shared lzma")
-else()
-  check_vendoring_approved(lzma)
-  if(LIBLZMA_FOUND AND NOT HAVE_LZMA_H)
-    message(STATUS "Shared lzma found but lacks headers, falling back to the static library")
-  else()
-    message(STATUS "Shared lzma not found, falling back to the static library")
-  endif()
-  add_subdirectory(Externals/liblzma)
-endif()
+check_vendoring_approved(lzma)
+message(STATUS "Shared lzma not found, falling back to the static library")
+add_subdirectory(Externals/liblzma)
 
 pkg_search_module(ZSTD QUIET libzstd)
 if(ZSTD_FOUND AND NOT WIN32)

