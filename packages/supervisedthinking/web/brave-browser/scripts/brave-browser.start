#!/bin/sh
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2021-present Frank Hartung (supervisedthinking (@) gmail.com)

# Source environment variables
. /etc/profile
oe_setup_addon service.rr-config-tool

################################################################################
# Set global variables
################################################################################

BRAVE_ICON_CACHE="/storage/.cache/brave-browser.pkg/product_logo_256.png"
BRAVE_ICON_OPT="/opt/brave.com/DefaultAddonWebSkinBrave.png"
BRAVE_PKG_PATH="/storage/.cache/brave-browser.pkg"
BRAVE_CONFIG_PATH="/storage/.config/BraveSoftware/Brave-Browser"
BRAVE_VERSION_FILE="${BRAVE_PKG_PATH}/brave.version"
BRAVE_USER_FLAGS_CONF="${BRAVE_CONFIG_PATH}/brave-flags.conf"
BRAVE_DEFAULT_FLAGS_CONF="/opt/brave.com/brave-default-flags.conf"
BRAVE_LOG="/var/log/brave-browser.log"
BRAVE_TMP="/tmp/brave-browser"
BRAVE_RELEASE_URL="https://brave-browser-downloads.s3.brave.com/latest/release.version"

################################################################################
# Functions
################################################################################

brave_clean_up() {
  # Clean up
  if [ -f ${BRAVE_LOG} ];then
    rm ${BRAVE_LOG} ; touch ${BRAVE_LOG}
  elif [ -d ${BRAVE_TMP} ];then
    rm -rf ${BRAVE_TMP}
  fi
}

brave_set_icon() {
  # Setting icon for Kodi
  if [ -f ${BRAVE_ICON_CACHE} ];then
    BRAVE_ICON=${BRAVE_ICON_CACHE}
  else
    BRAVE_ICON=${BRAVE_ICON_OPT}
  fi
}

brave_get_repo_version() {
  # Get latest Brave version
  BRAVE_REPO_VERSION=$(curl -s ${BRAVE_RELEASE_URL})

  if [ ! -z "${BRAVE_REPO_VERSION}" ]; then
    echo ${BRAVE_REPO_VERSION}
  fi
}

brave_get_installed_version() {
  # Get installed Brave version
  if [ -f ${BRAVE_VERSION_FILE} ]; then
    BRAVE_CACHED_VER=$(cat ${BRAVE_VERSION_FILE})
  else
    BRAVE_CACHED_VER="unknown version"
  fi
  echo ${BRAVE_CACHED_VER}
}

brave_get_download_url() {
  BRAVE_RELEASE_VERSION=$(brave_get_repo_version)
  BRAVE_GIT_URL="https://github.com/brave/brave-browser/releases/download/v${BRAVE_RELEASE_VERSION}/brave-browser_${BRAVE_RELEASE_VERSION}_amd64.deb"

  # Print URL to Brave package if curl can access it
  if [ ! -z "$(curl -s --head ${BRAVE_GIT_URL} | head -n 1 | grep "HTTP/2\ [23]0[0-6]")" ]; then
    echo ${BRAVE_GIT_URL}
  fi
}

brave_restore_default_config() {
  # Restore default user conf flags
  if [ ! -f ${BRAVE_USER_FLAGS_CONF} ];then
    if [ ! -d ${BRAVE_CONFIG_PATH} ];then
    mkdir -p ${BRAVE_CONFIG_PATH}
  fi
    cp ${BRAVE_DEFAULT_FLAGS_CONF} ${BRAVE_USER_FLAGS_CONF}
  fi
}

brave_get_user_flags(){
  # Get user flags for Brave
  BRAVE_FLAGS="$(cat ${BRAVE_USER_FLAGS_CONF})"

  if [ ${RR_BRAVE_TEST_TYPE} = "true" ];then
    BRAVE_FLAGS="${BRAVE_FLAGS} --test-type"
  fi
  echo ${BRAVE_FLAGS}
}

brave_install() {
  # Install Brave Browser
  if [ ! -d ${BRAVE_PKG_PATH} ]; then
    BRAVE_DOWNLOAD_URL=$(brave_get_download_url)
    BRAVE_RELEASE_VERSION=$(brave_get_repo_version)

    # Check if URL exists & install
    if [ ! -z "${BRAVE_DOWNLOAD_URL}" ];then
      echo -e "\n####################################" >> ${BRAVE_LOG} 2>&1
      echo "# Install: installing Brave" ${BRAVE_RELEASE_VERSION} >> ${BRAVE_LOG} 2>&1
      echo -e "####################################" >> ${BRAVE_LOG} 2>&1

      kodi-send --action="Notification(Brave,Downloading & installing the Brave Browser package - please stand by.,6750,${BRAVE_ICON})"
      mkdir -p ${BRAVE_TMP}
      cd ${BRAVE_TMP}
      wget -q ${BRAVE_DOWNLOAD_URL}
      if [ -f ${BRAVE_TMP}/brave-browser_${BRAVE_RELEASE_VERSION}_amd64.deb ];then
        kodi-send --action="Notification(Brave,Package download finished - installing Brave Browser.,5000,${BRAVE_ICON})"
        ar -x *.deb 
        tar -xJf data.tar.xz
        mv opt/brave.com/brave ${BRAVE_PKG_PATH}
        echo ${BRAVE_RELEASE_VERSION} > ${BRAVE_VERSION_FILE} 2>&1
        cp usr/share/applications/brave-browser.desktop ${BRAVE_PKG_PATH}/
      else
        echo -e "\n# Install: Could not download the Brave package, could not install Brave!" >> ${BRAVE_LOG} 2>&1
        kodi-send --action="Notification(Brave,Could not download the Brave package - could not install Brave!,6750,${BRAVE_ICON})"
      fi
      cd - 
      rm -rf ${BRAVE_TMP}

    else
      echo -e "\n# Install: Could not obtain a valid url to the Brave package or the server did not respond, could not install Brave!" >> ${BRAVE_LOG} 2>&1
    fi
  fi
}

brave_update() {
  if [ -d ${BRAVE_PKG_PATH} ]; then
    BRAVE_DOWNLOAD_URL=$(brave_get_download_url)

    # Check if URL exists
    if [ ! -z "${BRAVE_DOWNLOAD_URL}" ];then
      BRAVE_RELEASE_VERSION=$(brave_get_repo_version)
      BRAVE_INSTALLED_VERSION=$(brave_get_installed_version)

      # Update if installed version != online version
      if [ ! -z "${BRAVE_RELEASE_VERSION}" ] && [ "${BRAVE_RELEASE_VERSION}" != "${BRAVE_INSTALLED_VERSION}" ]; then
        echo -e "\n####################################################################" >> ${BRAVE_LOG} 2>&1
        echo "# Update: updating Brave" "${BRAVE_INSTALLED_VERSION}" "to" "${BRAVE_RELEASE_VERSION}" >> ${BRAVE_LOG} 2>&1
        echo -e "####################################################################" >> ${BRAVE_LOG} 2>&1

        kodi-send --action="Notification(Brave,An update to Brave Browser v${BRAVE_RELEASE_VERSION} is availabe - please stand by.,6750,${BRAVE_ICON})"
        mkdir -p ${BRAVE_TMP}
        cd ${BRAVE_TMP}
        wget -q ${BRAVE_DOWNLOAD_URL}
        if [ -f ${BRAVE_TMP}/brave-browser_${BRAVE_RELEASE_VERSION}_amd64.deb ];then
          kodi-send --action="Notification(Brave,Package download finished - updating Brave Browser.,5000,${BRAVE_ICON})"
          ar -x *.deb 
          tar -xJf data.tar.xz
          rm -rf ${BRAVE_PKG_PATH}
          mv opt/brave.com/brave ${BRAVE_PKG_PATH}
          echo ${BRAVE_RELEASE_VERSION} > ${BRAVE_VERSION_FILE} 2>&1
          cp usr/share/applications/brave-browser.desktop ${BRAVE_PKG_PATH}/
         else
           echo -e "\n# Update: Could not download the Brave package, could not update Brave!" >> ${BRAVE_LOG} 2>&1
         fi
        cd - 
        rm -rf ${BRAVE_TMP}
      else
        echo -e "\n# Update: the latest Brave Browser is already installed." >> ${BRAVE_LOG} 2>&1  
      fi
    else
      echo -e "\n# Update: Could not obtain a valid url for the latest Brave package or the server did not respond!" >> ${BRAVE_LOG} 2>&1
    fi
  fi
}

brave_run() {
  # Start Brave if binary is in place
  if [ -f ${BRAVE_PKG_PATH}/brave ]; then
    BRAVE_INSTALLED_VERSION=$(brave_get_installed_version)
    BRAVE_USER_FLAGS=$(brave_get_user_flags)

    echo -e "\n###########################################################################################################################" >> ${BRAVE_LOG} 2>&1
    echo "# Run: starting Brave" "${BRAVE_INSTALLED_VERSION}" >> ${BRAVE_LOG} 2>&1
    echo "# Run: user flags:" "${BRAVE_USER_FLAGS}"           >> ${BRAVE_LOG} 2>&1
    echo -e "###########################################################################################################################\n" >> ${BRAVE_LOG} 2>&1

    kodictrl --mute
    systemctl stop pulseaudio
    set_refresh_rate_BRAVE

    ${BRAVE_PKG_PATH}/brave ${BRAVE_USER_FLAGS} "$@" >> ${BRAVE_LOG} 2>&1

    systemctl start pulseaudio
    kodictrl --unmute

  # If no Brave binary is found send error message
  elif [ ! -f ${BRAVE_PKG_PATH}/brave ]; then
    echo -e "\n# Run: the Brave Browser is not installed, could not start Brave!" >> ${BRAVE_LOG} 2>&1  
    kodi-send --action="Notification(Brave,The Brave Browser is not installed and could not be launched. ,5500,${BRAVE_ICON})"
  fi
}

main(){
  brave_clean_up
  brave_set_icon
  brave_restore_default_config
  brave_install
  brave_update
  brave_run "$@"
}

################################################################################
# Main
################################################################################

main "$@" >> ${BRAVE_LOG} 2>&1
