# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2018-present Frank Hartung (supervisedthinking (@) gmail.com)

# Set common paths
export PULSE_RUNTIME_PATH=/run/pulse

# Configure & load Pulseaudio sinks
pulseaudio_sink_load() {
  oe_setup_addon service.rr-config-tool

  # Use Bluetooth device
  if [ ! -z "$(pactl list modules short | grep module-bluez5-device)" ];then
    echo "rr-config-script: PulseAudio: module-bluez5-device loaded, use Bluetooth device set by Kodi"
    echo "rr-config-script: PulseAudio: will use sink #"$(pactl list sinks short)
  # Configure Pulseaudio modules
  else
    # Check if Pulseaudio is should be used
    if [ ! -z ${RR_AUDIO_BACKEND} ] && [ ${RR_AUDIO_BACKEND} = "PulseAudio" ];then

      # Configure usage of timer-based audio scheduling (tsched)
      # https://wiki.archlinux.org/index.php/PulseAudio/Troubleshooting#Glitches,_skips_or_crackling
      if [ "${RR_PA_TSCHED}" = "false" ];then
        TSCHED="tsched=0"
        RA_TSCHED_STATE="rr-config-script: PulseAudio: will disable timer-based audio scheduling (${TSCHED})"
      else
        TSCHED="tsched=1"
        RA_TSCHED_STATE="rr-config-script: PulseAudio: will enable timer-based audio scheduling (${TSCHED})"
      fi

      # Configure Pulseaudio modules if no sink is in use
      if [ ! -z "$(pactl list modules short | grep module-null-sink)" ];then

        # Use module-udev-detect
        if [ "${RR_PA_UDEV}" = "true" ]; then
          pactl load-module module-udev-detect ${TSCHED} > /dev/null
          pactl set-sink-volume "$(pactl info | grep 'Default Sink:' | cut -d ' ' -f 3)" ${RR_AUDIO_VOLUME}%
          if [ ! -z "$(pactl list modules short | grep module-alsa-card)" ];then
            echo ${RA_TSCHED_STATE}
            echo "rr-config-script: PulseAudio: module-udev-detect loaded, setting a volume of "${RR_AUDIO_VOLUME}"%"
            echo "rr-config-script: PulseAudio: will use sink #"$(pactl list sinks short)
          else
            echo "rr-config-script: PulseAudio: module-udev-detect failed to load"
          fi

        # Use module-alsa-sink pcm device defined by 'aplay -L'
        else
          pactl load-module module-alsa-sink device="${RR_AUDIO_DEVICE}" name="temp_sink" ${TSCHED} > /dev/null
          pactl set-sink-volume alsa_output.temp_sink ${RR_AUDIO_VOLUME}%
          if [ ! -z "$(pactl list modules short | grep module-alsa-sink)" ];then
            echo ${RA_TSCHED_STATE}
            echo "rr-config-script: PulseAudio: module-alsa-sink loaded, setting a volume of "${RR_AUDIO_VOLUME}"%"
            echo "rr-config-script: PulseAudio: will use sink #"$(pactl list sinks short)
          else
            echo "rr-config-script: PulseAudio: module-alsa-sink failed to load"
          fi
        fi
      fi
    fi
  fi
}

# Unload PulseAudio sink
pulseaudio_sink_unload() {
  oe_setup_addon service.rr-config-tool

  # Keep Bluetooth device in use
  if [ ! -z "$(pactl list modules short | grep module-bluez5-device)" ];then
    echo "rr-config-script: PulseAudio: module-bluez5-device in use, nothing to do"
  else
    # Unload Pulseaudio modules
    if [ ! -z ${RR_AUDIO_BACKEND} ] && [ ${RR_AUDIO_BACKEND} = "PulseAudio" ]; then
      # Unload module-udev-detect
      if [ "${RR_PA_UDEV}" = "true" ] && [ ! -z "$(pactl list modules short | grep module-alsa-card)" ]; then
        pactl set-sink-volume "$(pactl info | grep 'Default Sink:' | cut -d ' ' -f 3)" 100%  
        pactl unload-module module-udev-detect
        pactl unload-module module-alsa-card
        echo "rr-config-script: PulseAudio: module-udev-detect unloaded"
      # Unload module-alsa-sink
      elif [ "${RR_PA_UDEV}" = "false" ] && [ ! -z "$(pactl list modules short | grep module-alsa-sink)" ]; then
        pactl set-sink-volume alsa_output.temp_sink 100%
        NUMBER="$(pactl list modules short | grep "name=temp_sink" | awk '{print $1;}')"
        if [ -n "${NUMBER}" ]; then
          pactl unload-module "${NUMBER}"
        fi
        echo "rr-config-script: PulseAudio: module-alsa-sink #${NUMBER} unloaded"
      else
        echo "rr-config-script: PulseAudio: module module-alsa-card nor module-alsa-sink was found. Nothing to unload"
      fi

      # Restore ALSA Master volume to 100%
      if [ ! -z "$(amixer | grep "'Master',0")" ] && [ ! $(amixer get Master | awk '$0~/%/{print $4}' | tr -d '[]%') = "100" ]; then
        amixer -q set Master,0 100% unmute
        echo "rr-config-script: ALSA: mixer restored volume to 100%"
      fi
    fi
  fi
}

# Start FluidSynth service
fluidsynth_service_start() {
  oe_setup_addon service.rr-config-tool

  if [ ! -z ${RR_AUDIO_BACKEND} ] && [ ${RR_AUDIO_BACKEND} = "PulseAudio" ] && [ ${RR_FLUIDSYNTH} = "true" ]; then
    if [ ! "$(systemctl is-active fluidsynth)" = "active" ]; then
      systemctl start fluidsynth
      if [ "$(systemctl is-active fluidsynth)" = "active" ]; then 
        echo "rr-config-script: FluidSynth: service successfully started"
      else
        echo "rr-config-script: FluidSynth: service failed to start"
      fi
    else
      echo "rr-config-script: FluidSynth: service is already running"
    fi
  fi
}

# Stop FluidSynth service
fluidsynth_service_stop() {
  oe_setup_addon service.rr-config-tool

  if [ "$(systemctl is-active fluidsynth)" = "active" ]; then
    systemctl stop fluidsynth
    if [ ! "$(systemctl is-active fluidsynth)" = "active" ]; then 
      echo "rr-config-script: FluidSynth: service successfully stopped"
    else
      echo "rr-config-script: FluidSynth: service failed to stop"
    fi
  else
    echo "rr-config-script: FluidSynth: service was not running, nothing to stop"
  fi
}

# SDL2: Set audio driver to Pulseaudio or ALSA
set_SDL_audiodriver() {
  oe_setup_addon service.rr-config-tool

  if [ ! -z ${RR_AUDIO_BACKEND} ] && [ ${RR_AUDIO_BACKEND} = "PulseAudio" ]; then
    export SDL_AUDIODRIVER=pulseaudio
  else
    export SDL_AUDIODRIVER=alsa
  fi
  echo "rr-config-script: SDL2: set environment variable SDL_AUDIODRIVER="${SDL_AUDIODRIVER}
}

# Retroarch: set audio and/or MIDI driver
set_RA_audiodriver() {
  oe_setup_addon service.rr-config-tool

  RETROARCH_HOME=/storage/.config/retroarch
  RETROARCH_CONFIG=${RETROARCH_HOME}/retroarch.cfg

  if [ -f ${RETROARCH_CONFIG} ]; then
    if [ ! -z ${RR_AUDIO_BACKEND} ] && [ ${RR_AUDIO_BACKEND} = "PulseAudio" ]; then
      sed -e "s/audio_driver = \"alsathread\"/audio_driver = \"pulse\"/"  -i ${RETROARCH_CONFIG}
      echo "rr-config-script: Retroarch: set audio driver to PulseAudio"
 
      # Configure Retroarch to use PA & FS as MIDI device
      if [ ${RR_FLUIDSYNTH} = "true" ]; then
        sed -e "s/midi_driver = \"null\"/midi_driver = \"alsa\"/"         -i ${RETROARCH_CONFIG}
        sed -e "s/midi_output = \"Off\"/midi_output = \"FluidSynth\"/"    -i ${RETROARCH_CONFIG}
        echo "rr-config-script: Retroarch: set MIDI driver to ALSA & output to FluidSynth"
  
      # Configure Retroarch to use PA & disable MIDI  
      else
        sed -e "s/midi_driver = \"alsa\"/midi_driver = \"null\"/"         -i ${RETROARCH_CONFIG}
        sed -e "s/midi_output = \"FluidSynth\"/midi_output = \"Off\"/"    -i ${RETROARCH_CONFIG}
        echo "rr-config-script: Retroarch: disable MIDI driver & output"
      fi
    # Configure Retroarch to use ALSA & disable MIDI  
    else
      sed -e "s/audio_driver = \"pulse\"/audio_driver = \"alsathread\"/" -i ${RETROARCH_CONFIG}
      sed -e "s/midi_driver = \"alsa\"/midi_driver = \"null\"/"          -i ${RETROARCH_CONFIG}
      sed -e "s/midi_output = \"FluidSynth\"/midi_output = \"Off\"/"     -i ${RETROARCH_CONFIG}
      echo "rr-config-script: Retroarch: force audio driver to ALSA & disable MIDI output"
    fi
  fi
}
