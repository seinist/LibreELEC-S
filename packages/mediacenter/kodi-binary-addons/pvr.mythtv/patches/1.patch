From d077a0ce4f19328484143dcd6cbfd8bbff524db8 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Tue, 28 Dec 2021 12:08:09 +0100
Subject: [PATCH] API related update

---
 src/addon.cpp                              | 22 +++-----
 src/addon.h                                | 16 ++----
 src/artworksmanager.cpp                    |  6 +-
 src/artworksmanager.h                      |  2 +-
 src/avinfo.cpp                             |  2 +-
 src/avinfo.h                               |  2 +-
 src/categories.cpp                         |  4 +-
 src/categories.h                           |  2 +-
 src/cppmyth/MythScheduleHelper75.cpp       | 60 ++++++++++----------
 src/cppmyth/MythScheduleHelperNoHelper.cpp |  6 +-
 src/filestreaming.h                        |  2 +-
 src/pvrclient-launcher.cpp                 | 12 ++--
 src/pvrclient-launcher.h                   |  2 +-
 src/pvrclient-mythtv.cpp                   | 38 ++++++-------
 src/pvrclient-mythtv.h                     |  4 +-
 src/settings.cpp                           | 66 +++++++++++-----------
 src/settings.h                             |  2 +-
 src/taskhandler.h                          |  2 +-
 18 files changed, 121 insertions(+), 129 deletions(-)

diff --git a/src/addon.cpp b/src/addon.cpp
index 1699e479..81e92197 100644
--- a/src/addon.cpp
+++ b/src/addon.cpp
@@ -11,20 +11,17 @@
 #include "pvrclient-mythtv.h"
 
 ADDON_STATUS CPVRMythTVAddon::SetSetting(const std::string& settingName,
-                                              const kodi::CSettingValue& settingValue)
+                                              const kodi::addon::CSettingValue& settingValue)
 {
   if (m_client)
     return m_settings.SetSetting(*m_client, settingName, settingValue);
   return ADDON_STATUS_UNKNOWN;
 }
 
-ADDON_STATUS CPVRMythTVAddon::CreateInstance(int instanceType,
-                                             const std::string& instanceID,
-                                             KODI_HANDLE instance,
-                                             const std::string& version,
-                                             KODI_HANDLE& addonInstance)
+ADDON_STATUS CPVRMythTVAddon::CreateInstance(const kodi::addon::IInstanceInfo& instance,
+                                             KODI_ADDON_INSTANCE_HDL& hdl)
 {
-  if (instanceType == ADDON_INSTANCE_PVR)
+  if (instance.IsType(ADDON_INSTANCE_PVR))
   {
     kodi::Log(ADDON_LOG_INFO, "Creating MythTV PVR-Client");
     kodi::Log(ADDON_LOG_INFO, "Addon compiled with PVR API version %s", STR(ADDON_INSTANCE_VERSION_PVR));
@@ -37,12 +34,12 @@ ADDON_STATUS CPVRMythTVAddon::CreateInstance(int instanceType,
 
     m_settings.Load();
 
-    m_client = new PVRClientMythTV(instance, version);
+    m_client = new PVRClientMythTV(instance);
     m_launcher = new PVRClientLauncher(m_client);
 
     if (m_launcher->Start())
     {
-      addonInstance = m_client;
+      hdl = m_client;
       kodi::Log(ADDON_LOG_INFO, "Addon started successfully");
       return ADDON_STATUS_OK;
     }
@@ -60,11 +57,10 @@ ADDON_STATUS CPVRMythTVAddon::CreateInstance(int instanceType,
   return ADDON_STATUS_UNKNOWN;
 }
 
-void CPVRMythTVAddon::DestroyInstance(int instanceType,
-                                      const std::string& instanceID,
-                                      KODI_HANDLE addonInstance)
+void CPVRMythTVAddon::DestroyInstance(const kodi::addon::IInstanceInfo& instance,
+                                      const KODI_ADDON_INSTANCE_HDL hdl)
 {
-  if (instanceType == ADDON_INSTANCE_PVR)
+  if (instance.IsType(ADDON_INSTANCE_PVR))
   {
     delete m_launcher;
     m_launcher = nullptr;
diff --git a/src/addon.h b/src/addon.h
index c19caf51..83167ed2 100644
--- a/src/addon.h
+++ b/src/addon.h
@@ -18,21 +18,17 @@
 class PVRClientMythTV;
 class PVRClientLauncher;
 
-class ATTRIBUTE_HIDDEN CPVRMythTVAddon : public kodi::addon::CAddonBase
+class ATTR_DLL_LOCAL CPVRMythTVAddon : public kodi::addon::CAddonBase
 {
 public:
   CPVRMythTVAddon() = default;
 
   ADDON_STATUS SetSetting(const std::string& settingName,
-                          const kodi::CSettingValue& settingValue) override;
-  ADDON_STATUS CreateInstance(int instanceType,
-                              const std::string& instanceID,
-                              KODI_HANDLE instance,
-                              const std::string& version,
-                              KODI_HANDLE& addonInstance) override;
-  void DestroyInstance(int instanceType,
-                       const std::string& instanceID,
-                       KODI_HANDLE addonInstance) override;
+                          const kodi::addon::CSettingValue& settingValue) override;
+  ADDON_STATUS CreateInstance(const kodi::addon::IInstanceInfo& instance,
+                              KODI_ADDON_INSTANCE_HDL& hdl) override;
+  void DestroyInstance(const kodi::addon::IInstanceInfo& instance,
+                       const KODI_ADDON_INSTANCE_HDL hdl) override;
 
 private:
   CMythSettings m_settings;
diff --git a/src/artworksmanager.cpp b/src/artworksmanager.cpp
index 37524474..a6b0b9d4 100644
--- a/src/artworksmanager.cpp
+++ b/src/artworksmanager.cpp
@@ -31,7 +31,7 @@ std::string ArtworkManager::GetChannelIconPath(const MythChannel& channel)
   if (channel.IsNull() || channel.Icon().empty())
     return "";
   if (!CMythSettings::GetChannelIcons())
-    return kodi::GetAddonPath() + PATH_SEPARATOR_STRING + "resources" + PATH_SEPARATOR_STRING + FILEOPS_CHANNEL_DUMMY_ICON;
+    return kodi::addon::GetAddonPath() + PATH_SEPARATOR_STRING + "resources" + PATH_SEPARATOR_STRING + FILEOPS_CHANNEL_DUMMY_ICON;
 
   return m_wsapi->GetChannelIconUrl(channel.ID(), CHANNEL_ICON_WIDTH);
 }
@@ -41,7 +41,7 @@ std::string ArtworkManager::GetPreviewIconPath(const MythProgramInfo& recording)
   if (recording.IsNull())
     return "";
   if (!CMythSettings::GetRecordingIcons())
-    return kodi::GetAddonPath() + PATH_SEPARATOR_STRING + "resources" + PATH_SEPARATOR_STRING + FILEOPS_RECORDING_DUMMY_ICON;
+    return kodi::addon::GetAddonPath() + PATH_SEPARATOR_STRING + "resources" + PATH_SEPARATOR_STRING + FILEOPS_RECORDING_DUMMY_ICON;
 
   return m_wsapi->GetPreviewImageUrl(recording.ChannelID(), recording.RecordingStartTime());
 }
@@ -54,7 +54,7 @@ std::string ArtworkManager::GetArtworkPath(const MythProgramInfo& recording, Art
     switch (type)
     {
     case AWTypeCoverart:
-      return kodi::GetAddonPath() + PATH_SEPARATOR_STRING + "resources" + PATH_SEPARATOR_STRING + FILEOPS_RECORDING_DUMMY_ICON;
+      return kodi::addon::GetAddonPath() + PATH_SEPARATOR_STRING + "resources" + PATH_SEPARATOR_STRING + FILEOPS_RECORDING_DUMMY_ICON;
     default:
       return "";
     }
diff --git a/src/artworksmanager.h b/src/artworksmanager.h
index 7a846961..380f93de 100644
--- a/src/artworksmanager.h
+++ b/src/artworksmanager.h
@@ -18,7 +18,7 @@
 
 class PVRClientMythTV;
 
-class ATTRIBUTE_HIDDEN ArtworkManager
+class ATTR_DLL_LOCAL ArtworkManager
 {
 public:
   enum ArtworksType
diff --git a/src/avinfo.cpp b/src/avinfo.cpp
index a937271e..92d7a5ce 100644
--- a/src/avinfo.cpp
+++ b/src/avinfo.cpp
@@ -18,7 +18,7 @@ void AVInfoLog(int level, char *msg)
   if (msg && level != DEMUX_DBG_NONE)
   {
     bool doLog = CMythSettings::GetExtraDebug();
-    AddonLog loglevel = ADDON_LOG_DEBUG;
+    ADDON_LOG loglevel = ADDON_LOG_DEBUG;
     switch (level)
     {
     case DEMUX_DBG_ERROR:
diff --git a/src/avinfo.h b/src/avinfo.h
index 12e86151..f571dd33 100644
--- a/src/avinfo.h
+++ b/src/avinfo.h
@@ -20,7 +20,7 @@
 
 class PVRClientMythTV;
 
-class ATTRIBUTE_HIDDEN AVInfo : public TSDemux::TSDemuxer
+class ATTR_DLL_LOCAL AVInfo : public TSDemux::TSDemuxer
 {
 public:
   AVInfo(PVRClientMythTV& client, Myth::Stream *file);
diff --git a/src/categories.cpp b/src/categories.cpp
index 7088bac6..559c43c6 100644
--- a/src/categories.cpp
+++ b/src/categories.cpp
@@ -18,9 +18,9 @@ Categories::Categories()
 : m_categoriesById()
 {
   std::string filePath;
-  filePath = kodi::GetAddonPath(std::string("resources") + PATH_SEPARATOR_STRING + CATEGORIES_FILENAME);
+  filePath = kodi::addon::GetAddonPath(std::string("resources") + PATH_SEPARATOR_STRING + CATEGORIES_FILENAME);
   LoadEITCategories(filePath.c_str());
-  filePath = kodi::GetBaseUserPath(CATEGORIES_FILENAME);
+  filePath = kodi::addon::GetUserPath(CATEGORIES_FILENAME);
   LoadEITCategories(filePath.c_str());
   // Copy over
   CategoryByIdMap::const_iterator it;
diff --git a/src/categories.h b/src/categories.h
index ea3d7030..f7ffe4c1 100644
--- a/src/categories.h
+++ b/src/categories.h
@@ -16,7 +16,7 @@
 typedef std::multimap<int, std::string> CategoryByIdMap;
 typedef std::map<std::string, int> CategoryByNameMap;
 
-class ATTRIBUTE_HIDDEN Categories
+class ATTR_DLL_LOCAL Categories
 {
 public:
   Categories();
diff --git a/src/cppmyth/MythScheduleHelper75.cpp b/src/cppmyth/MythScheduleHelper75.cpp
index 9a831910..658663a9 100644
--- a/src/cppmyth/MythScheduleHelper75.cpp
+++ b/src/cppmyth/MythScheduleHelper75.cpp
@@ -32,8 +32,8 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
     MythTimerType::AttributeList autoExpireList;
     int autoExpire0 = GetRuleExpirationId(RuleExpiration(false, 0, false));
     int autoExpire1 = GetRuleExpirationId(RuleExpiration(true, 0, false));
-    autoExpireList.emplace_back(autoExpire0, kodi::GetLocalizedString(30506)); // Recordings never expire
-    autoExpireList.emplace_back(autoExpire1, kodi::GetLocalizedString(30507)); // Allow recordings to expire
+    autoExpireList.emplace_back(autoExpire0, kodi::addon::GetLocalizedString(30506)); // Recordings never expire
+    autoExpireList.emplace_back(autoExpire1, kodi::addon::GetLocalizedString(30507)); // Allow recordings to expire
 
     m_timerTypeList.push_back(MythTimerTypePtr(new MythTimerType(TIMER_TYPE_MANUAL_SEARCH,
             PVR_TIMER_TYPE_IS_MANUAL |
@@ -45,7 +45,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
             PVR_TIMER_TYPE_SUPPORTS_PRIORITY |
             PVR_TIMER_TYPE_SUPPORTS_LIFETIME |
             PVR_TIMER_TYPE_SUPPORTS_RECORDING_GROUP,
-            kodi::GetLocalizedString(30460), // Manual
+            kodi::addon::GetLocalizedString(30460), // Manual
             GetRulePriorityList(),
             GetRulePriorityDefaultId(),
             emptyList,
@@ -65,7 +65,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
             PVR_TIMER_TYPE_SUPPORTS_PRIORITY |
             PVR_TIMER_TYPE_SUPPORTS_LIFETIME |
             PVR_TIMER_TYPE_SUPPORTS_RECORDING_GROUP,
-            kodi::GetLocalizedString(30465), // Record this
+            kodi::addon::GetLocalizedString(30465), // Record this
             GetRulePriorityList(),
             GetRulePriorityDefaultId(),
             emptyList,
@@ -86,7 +86,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
             PVR_TIMER_TYPE_SUPPORTS_PRIORITY |
             PVR_TIMER_TYPE_SUPPORTS_LIFETIME |
             PVR_TIMER_TYPE_SUPPORTS_RECORDING_GROUP,
-            kodi::GetLocalizedString(30461), // Record one
+            kodi::addon::GetLocalizedString(30461), // Record one
             GetRulePriorityList(),
             GetRulePriorityDefaultId(),
             GetRuleDupMethodList(),
@@ -109,7 +109,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
             PVR_TIMER_TYPE_SUPPORTS_PRIORITY |
             PVR_TIMER_TYPE_SUPPORTS_LIFETIME |
             PVR_TIMER_TYPE_SUPPORTS_RECORDING_GROUP,
-            kodi::GetLocalizedString(30462), // Record weekly
+            kodi::addon::GetLocalizedString(30462), // Record weekly
             GetRulePriorityList(),
             GetRulePriorityDefaultId(),
             emptyList,
@@ -133,7 +133,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
             PVR_TIMER_TYPE_SUPPORTS_PRIORITY |
             PVR_TIMER_TYPE_SUPPORTS_LIFETIME |
             PVR_TIMER_TYPE_SUPPORTS_RECORDING_GROUP,
-            kodi::GetLocalizedString(30463), // Record daily
+            kodi::addon::GetLocalizedString(30463), // Record daily
             GetRulePriorityList(),
             GetRulePriorityDefaultId(),
             GetRuleDupMethodList(),
@@ -154,7 +154,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
             PVR_TIMER_TYPE_SUPPORTS_PRIORITY |
             PVR_TIMER_TYPE_SUPPORTS_LIFETIME |
             PVR_TIMER_TYPE_SUPPORTS_RECORDING_GROUP,
-            kodi::GetLocalizedString(30464), // Record all
+            kodi::addon::GetLocalizedString(30464), // Record all
             GetRulePriorityList(),
             GetRulePriorityDefaultId(),
             GetRuleDupMethodList(),
@@ -173,7 +173,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
             PVR_TIMER_TYPE_SUPPORTS_PRIORITY |
             PVR_TIMER_TYPE_SUPPORTS_LIFETIME |
             PVR_TIMER_TYPE_SUPPORTS_RECORDING_GROUP,
-            kodi::GetLocalizedString(30466), // Record series
+            kodi::addon::GetLocalizedString(30466), // Record series
             GetRulePriorityList(),
             GetRulePriorityDefaultId(),
             GetRuleDupMethodList(),
@@ -194,7 +194,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
             PVR_TIMER_TYPE_SUPPORTS_PRIORITY |
             PVR_TIMER_TYPE_SUPPORTS_LIFETIME |
             PVR_TIMER_TYPE_SUPPORTS_RECORDING_GROUP,
-            kodi::GetLocalizedString(30467), // Search keyword
+            kodi::addon::GetLocalizedString(30467), // Search keyword
             GetRulePriorityList(),
             GetRulePriorityDefaultId(),
             GetRuleDupMethodList(),
@@ -215,7 +215,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
             PVR_TIMER_TYPE_SUPPORTS_PRIORITY |
             PVR_TIMER_TYPE_SUPPORTS_LIFETIME |
             PVR_TIMER_TYPE_SUPPORTS_RECORDING_GROUP,
-            kodi::GetLocalizedString(30468), // Search people
+            kodi::addon::GetLocalizedString(30468), // Search people
             GetRulePriorityList(),
             GetRulePriorityDefaultId(),
             GetRuleDupMethodList(),
@@ -234,7 +234,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
             PVR_TIMER_TYPE_SUPPORTS_PRIORITY |
             PVR_TIMER_TYPE_SUPPORTS_LIFETIME |
             PVR_TIMER_TYPE_SUPPORTS_RECORDING_GROUP,
-            kodi::GetLocalizedString(30451), // Unhandled
+            kodi::addon::GetLocalizedString(30451), // Unhandled
             GetRulePriorityList(),
             GetRulePriorityDefaultId(),
             GetRuleDupMethodList(),
@@ -251,7 +251,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
             PVR_TIMER_TYPE_SUPPORTS_PRIORITY |
             PVR_TIMER_TYPE_SUPPORTS_LIFETIME |
             PVR_TIMER_TYPE_SUPPORTS_RECORDING_GROUP,
-            kodi::GetLocalizedString(30469), // Rule Disabled
+            kodi::addon::GetLocalizedString(30469), // Rule Disabled
             GetRulePriorityList(),
             GetRulePriorityDefaultId(),
             emptyList,
@@ -268,7 +268,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
             PVR_TIMER_TYPE_SUPPORTS_PRIORITY |
             PVR_TIMER_TYPE_SUPPORTS_LIFETIME |
             PVR_TIMER_TYPE_SUPPORTS_RECORDING_GROUP,
-            kodi::GetLocalizedString(30452), // Upcoming
+            kodi::addon::GetLocalizedString(30452), // Upcoming
             GetRulePriorityList(),
             GetRulePriorityDefaultId(),
             emptyList,
@@ -285,7 +285,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
             PVR_TIMER_TYPE_SUPPORTS_PRIORITY |
             PVR_TIMER_TYPE_SUPPORTS_LIFETIME |
             PVR_TIMER_TYPE_SUPPORTS_RECORDING_GROUP,
-            kodi::GetLocalizedString(30457), // Alternative
+            kodi::addon::GetLocalizedString(30457), // Alternative
             GetRulePriorityList(),
             GetRulePriorityDefaultId(),
             emptyList,
@@ -302,7 +302,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
             PVR_TIMER_TYPE_SUPPORTS_PRIORITY |
             PVR_TIMER_TYPE_SUPPORTS_LIFETIME |
             PVR_TIMER_TYPE_SUPPORTS_RECORDING_GROUP,
-            kodi::GetLocalizedString(30458), // Currently recorded
+            kodi::addon::GetLocalizedString(30458), // Currently recorded
             GetRulePriorityList(),
             GetRulePriorityDefaultId(),
             emptyList,
@@ -319,7 +319,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
             PVR_TIMER_TYPE_SUPPORTS_PRIORITY |
             PVR_TIMER_TYPE_SUPPORTS_LIFETIME |
             PVR_TIMER_TYPE_SUPPORTS_RECORDING_GROUP,
-            kodi::GetLocalizedString(30459), // Expired recording
+            kodi::addon::GetLocalizedString(30459), // Expired recording
             GetRulePriorityList(),
             GetRulePriorityDefaultId(),
             emptyList,
@@ -336,7 +336,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
             PVR_TIMER_TYPE_SUPPORTS_PRIORITY |
             PVR_TIMER_TYPE_SUPPORTS_LIFETIME |
             PVR_TIMER_TYPE_SUPPORTS_RECORDING_GROUP,
-            kodi::GetLocalizedString(30453), // Overriden
+            kodi::addon::GetLocalizedString(30453), // Overriden
             GetRulePriorityList(),
             GetRulePriorityDefaultId(),
             emptyList,
@@ -352,7 +352,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
             PVR_TIMER_TYPE_SUPPORTS_CHANNELS |
             PVR_TIMER_TYPE_SUPPORTS_START_TIME |
             PVR_TIMER_TYPE_SUPPORTS_END_TIME,
-            kodi::GetLocalizedString(30454), // Don't record
+            kodi::addon::GetLocalizedString(30454), // Don't record
             emptyList,
             0, // n&v
             emptyList,
@@ -364,7 +364,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
 
     m_timerTypeList.push_back(MythTimerTypePtr(new MythTimerType(TIMER_TYPE_UPCOMING_MANUAL,
             PVR_TIMER_TYPE_IS_READONLY,
-            kodi::GetLocalizedString(30455), // Upcoming manual
+            kodi::addon::GetLocalizedString(30455), // Upcoming manual
             emptyList,
             0, // n&v
             emptyList,
@@ -376,7 +376,7 @@ MythTimerTypeList MythScheduleHelper75::GetTimerTypes() const
 
     m_timerTypeList.push_back(MythTimerTypePtr(new MythTimerType(TIMER_TYPE_ZOMBIE,
             PVR_TIMER_TYPE_IS_READONLY,
-            kodi::GetLocalizedString(30456), // Zombie
+            kodi::addon::GetLocalizedString(30456), // Zombie
             emptyList,
             0, // n&v
             emptyList,
@@ -1341,11 +1341,11 @@ const MythTimerType::AttributeList& MythScheduleHelper75::GetRuleDupMethodList()
   if (!m_dupMethodListInit)
   {
     m_dupMethodListInit = true;
-    m_dupMethodList.emplace_back(static_cast<int>(Myth::DM_CheckNone), kodi::GetLocalizedString(30501));
-    m_dupMethodList.emplace_back(static_cast<int>(Myth::DM_CheckSubtitle), kodi::GetLocalizedString(30502));
-    m_dupMethodList.emplace_back(static_cast<int>(Myth::DM_CheckDescription), kodi::GetLocalizedString(30503));
-    m_dupMethodList.emplace_back(static_cast<int>(Myth::DM_CheckSubtitleAndDescription), kodi::GetLocalizedString(30504));
-    m_dupMethodList.emplace_back(static_cast<int>(Myth::DM_CheckSubtitleThenDescription), kodi::GetLocalizedString(30505));
+    m_dupMethodList.emplace_back(static_cast<int>(Myth::DM_CheckNone), kodi::addon::GetLocalizedString(30501));
+    m_dupMethodList.emplace_back(static_cast<int>(Myth::DM_CheckSubtitle), kodi::addon::GetLocalizedString(30502));
+    m_dupMethodList.emplace_back(static_cast<int>(Myth::DM_CheckDescription), kodi::addon::GetLocalizedString(30503));
+    m_dupMethodList.emplace_back(static_cast<int>(Myth::DM_CheckSubtitleAndDescription), kodi::addon::GetLocalizedString(30504));
+    m_dupMethodList.emplace_back(static_cast<int>(Myth::DM_CheckSubtitleThenDescription), kodi::addon::GetLocalizedString(30505));
   }
   return m_dupMethodList;
 }
@@ -1362,19 +1362,19 @@ const MythScheduleHelperNoHelper::RuleExpirationMap& MythScheduleHelper75::GetRu
     int index = (EXPIRATION_NEVER_EXPIRE_ID < EXPIRATION_ALLOW_EXPIRE_ID ? EXPIRATION_NEVER_EXPIRE_ID : EXPIRATION_ALLOW_EXPIRE_ID) - 100;
     for (int i = 100; i >= 1; --i)
     {
-      snprintf(buf, sizeof(buf), kodi::GetLocalizedString(30509).c_str(), i); // Keep %d newest and expire old
+      snprintf(buf, sizeof(buf), kodi::addon::GetLocalizedString(30509).c_str(), i); // Keep %d newest and expire old
       m_expirationMap.insert(std::make_pair(index++, std::make_pair(RuleExpiration(false,i,true), buf)));
     }
 
     // Insert cases 'auto expire'
-    m_expirationMap.insert(std::make_pair(EXPIRATION_NEVER_EXPIRE_ID, std::make_pair(RuleExpiration(false, 0, false), kodi::GetLocalizedString(30506)))); // Recordings never expire
-    m_expirationMap.insert(std::make_pair(EXPIRATION_ALLOW_EXPIRE_ID, std::make_pair(RuleExpiration(true, 0, false), kodi::GetLocalizedString(30507)))); // Allow recordings to expire
+    m_expirationMap.insert(std::make_pair(EXPIRATION_NEVER_EXPIRE_ID, std::make_pair(RuleExpiration(false, 0, false), kodi::addon::GetLocalizedString(30506)))); // Recordings never expire
+    m_expirationMap.insert(std::make_pair(EXPIRATION_ALLOW_EXPIRE_ID, std::make_pair(RuleExpiration(true, 0, false), kodi::addon::GetLocalizedString(30507)))); // Allow recordings to expire
 
     // Insert cases 'keep up'
     index = (EXPIRATION_ALLOW_EXPIRE_ID > EXPIRATION_NEVER_EXPIRE_ID ? EXPIRATION_ALLOW_EXPIRE_ID : EXPIRATION_NEVER_EXPIRE_ID) + 1;
     for (int i = 2; i <= 100; ++i)
     {
-      snprintf(buf, sizeof(buf), kodi::GetLocalizedString(30508).c_str(), i); // Keep up to %d recordings
+      snprintf(buf, sizeof(buf), kodi::addon::GetLocalizedString(30508).c_str(), i); // Keep up to %d recordings
       m_expirationMap.insert(std::make_pair(index++, std::make_pair(RuleExpiration(false,i,false), buf)));
     }
   }
diff --git a/src/cppmyth/MythScheduleHelperNoHelper.cpp b/src/cppmyth/MythScheduleHelperNoHelper.cpp
index ba4fc18b..eb692f2d 100644
--- a/src/cppmyth/MythScheduleHelperNoHelper.cpp
+++ b/src/cppmyth/MythScheduleHelperNoHelper.cpp
@@ -174,7 +174,7 @@ const MythTimerType::AttributeList& MythScheduleHelperNoHelper::GetRuleDupMethod
   if (!m_dupMethodListInit)
   {
     m_dupMethodListInit = true;
-    m_dupMethodList.emplace_back(static_cast<int>(Myth::DM_CheckNone), kodi::GetLocalizedString(30501)); // Don't match duplicates
+    m_dupMethodList.emplace_back(static_cast<int>(Myth::DM_CheckNone), kodi::addon::GetLocalizedString(30501)); // Don't match duplicates
   }
   return m_dupMethodList;
 }
@@ -184,8 +184,8 @@ const MythScheduleHelperNoHelper::RuleExpirationMap& MythScheduleHelperNoHelper:
   if (!m_expirationMapInit)
   {
     m_expirationMapInit = true;
-    m_expirationMap.insert(std::make_pair(EXPIRATION_NEVER_EXPIRE_ID, std::make_pair(RuleExpiration(false, 0, false), kodi::GetLocalizedString(30506)))); // Allow recordings to expire
-    m_expirationMap.insert(std::make_pair(EXPIRATION_ALLOW_EXPIRE_ID, std::make_pair(RuleExpiration(true, 0, false), kodi::GetLocalizedString(30507)))); // Allow recordings to expire
+    m_expirationMap.insert(std::make_pair(EXPIRATION_NEVER_EXPIRE_ID, std::make_pair(RuleExpiration(false, 0, false), kodi::addon::GetLocalizedString(30506)))); // Allow recordings to expire
+    m_expirationMap.insert(std::make_pair(EXPIRATION_ALLOW_EXPIRE_ID, std::make_pair(RuleExpiration(true, 0, false), kodi::addon::GetLocalizedString(30507)))); // Allow recordings to expire
   }
   return m_expirationMap;
 }
diff --git a/src/filestreaming.h b/src/filestreaming.h
index 50328284..aeb76af5 100644
--- a/src/filestreaming.h
+++ b/src/filestreaming.h
@@ -12,7 +12,7 @@
 
 #include <mythstream.h>
 
-class ATTRIBUTE_HIDDEN FileStreaming : public Myth::Stream
+class ATTR_DLL_LOCAL FileStreaming : public Myth::Stream
 {
 public:
   FileStreaming(const std::string& filePath);
diff --git a/src/pvrclient-launcher.cpp b/src/pvrclient-launcher.cpp
index 335e9884..1048bdd6 100644
--- a/src/pvrclient-launcher.cpp
+++ b/src/pvrclient-launcher.cpp
@@ -12,7 +12,7 @@
 
 #include <kodi/General.h>
 
-class ATTRIBUTE_HIDDEN PVRClientLauncherPrivate : private Myth::OS::CThread
+class ATTR_DLL_LOCAL PVRClientLauncherPrivate : private Myth::OS::CThread
 {
 public:
   PVRClientLauncherPrivate(PVRClientMythTV* client);
@@ -92,14 +92,14 @@ void* PVRClientLauncherPrivate::Process()
       m_client->GetBackendVersion(version);
       m_client->ConnectionStateChange(name, PVR_CONNECTION_STATE_CONNECTED, version);
       /* Read setting "LiveTV Priority" from backend database */
-      bool savedLiveTVPriority = kodi::GetSettingBoolean("livetv_priority", DEFAULT_LIVETV_PRIORITY);
+      bool savedLiveTVPriority = kodi::addon::GetSettingBoolean("livetv_priority", DEFAULT_LIVETV_PRIORITY);
       CMythSettings::SetLiveTVPriority(m_client->GetLiveTVPriority());
       if (CMythSettings::GetLiveTVPriority() != savedLiveTVPriority)
         m_client->SetLiveTVPriority(savedLiveTVPriority);
       /* End of process */
 
       // Connected.
-      std::string msg = kodi::GetLocalizedString(30114);
+      std::string msg = kodi::addon::GetLocalizedString(30114);
       kodi::QueueNotification(QUEUE_INFO, "", msg);
 
       break;
@@ -111,19 +111,19 @@ void* PVRClientLauncherPrivate::Process()
       if (error == PVRClientMythTV::CONN_ERROR_UNKNOWN_VERSION)
       {
         // Failed to connect the MythTV backend with the known protocol versions.
-        std::string msg = kodi::GetLocalizedString(30300);
+        std::string msg = kodi::addon::GetLocalizedString(30300);
         kodi::QueueNotification(QUEUE_ERROR, "", msg);
       }
       else if (error == PVRClientMythTV::CONN_ERROR_API_UNAVAILABLE)
       {
         // Failed to connect the API services of MythTV backend. Please check your PIN code or backend setup.
-        std::string msg = kodi::GetLocalizedString(30301);
+        std::string msg = kodi::addon::GetLocalizedString(30301);
         kodi::QueueNotification(QUEUE_ERROR, "", msg);
       }
       else
       {
         // No response from MythTV backend.
-        std::string msg = kodi::GetLocalizedString(30304);
+        std::string msg = kodi::addon::GetLocalizedString(30304);
         kodi::QueueNotification(QUEUE_WARNING, "", msg);
       }
       // No longer notify the failure
diff --git a/src/pvrclient-launcher.h b/src/pvrclient-launcher.h
index 069fa86a..08393529 100644
--- a/src/pvrclient-launcher.h
+++ b/src/pvrclient-launcher.h
@@ -14,7 +14,7 @@
 
 class PVRClientLauncherPrivate;
 
-class ATTRIBUTE_HIDDEN PVRClientLauncher
+class ATTR_DLL_LOCAL PVRClientLauncher
 {
 public:
   PVRClientLauncher(PVRClientMythTV* client);
diff --git a/src/pvrclient-mythtv.cpp b/src/pvrclient-mythtv.cpp
index 2f9d5e5b..83118f41 100644
--- a/src/pvrclient-mythtv.cpp
+++ b/src/pvrclient-mythtv.cpp
@@ -24,8 +24,8 @@
 
 #define SEEK_POSSIBLE 0x10 ///< flag used to check if protocol allows seeks
 
-PVRClientMythTV::PVRClientMythTV(KODI_HANDLE instance, const std::string& version)
-: kodi::addon::CInstancePVRClient(instance, version)
+PVRClientMythTV::PVRClientMythTV(const kodi::addon::IInstanceInfo& instance)
+: kodi::addon::CInstancePVRClient(instance)
 , m_connectionError(CONN_ERROR_NOT_CONNECTED)
 , m_eventHandler(NULL)
 , m_control(NULL)
@@ -81,7 +81,7 @@ static void Log(int level, char *msg)
   if (msg && level != MYTH_DBG_NONE)
   {
     bool doLog = true; //CMythSettings::GetExtraDebug();
-    AddonLog loglevel = ADDON_LOG_DEBUG;
+    ADDON_LOG loglevel = ADDON_LOG_DEBUG;
     switch (level)
     {
     case MYTH_DBG_ERROR:
@@ -340,7 +340,7 @@ void PVRClientMythTV::HandleBackendMessage(Myth::EventMessagePtr msg)
           m_scheduleManager->CloseControl();
         // notify the user when the screen is activated
         if (!m_powerSaving)
-          kodi::QueueNotification(QUEUE_ERROR, "", kodi::GetLocalizedString(30302)); // Connection to MythTV backend lost
+          kodi::QueueNotification(QUEUE_ERROR, "", kodi::addon::GetLocalizedString(30302)); // Connection to MythTV backend lost
       }
       else if (msg->subject[0] == EVENTHANDLER_CONNECTED)
       {
@@ -353,7 +353,7 @@ void PVRClientMythTV::HandleBackendMessage(Myth::EventMessagePtr msg)
           m_hang = false;
           // notify the user when the screen is activated
           if (!m_powerSaving)
-            kodi::QueueNotification(QUEUE_INFO, "", kodi::GetLocalizedString(30303)); // Connection to MythTV restored
+            kodi::QueueNotification(QUEUE_INFO, "", kodi::addon::GetLocalizedString(30303)); // Connection to MythTV restored
           // still in mode power saving I have to allow shutdown again
           if (m_powerSaving && CMythSettings::GetAllowMythShutdown())
             AllowBackendShutdown();
@@ -422,12 +422,12 @@ void PVRClientMythTV::HandleAskRecording(const Myth::EventMessage& msg)
     if (CMythSettings::GetLiveTVConflictStrategy() == LIVETV_CONFLICT_STRATEGY_CANCELREC ||
       (CMythSettings::GetLiveTVConflictStrategy() == LIVETV_CONFLICT_STRATEGY_HASLATER && haslater))
     {
-      kodi::QueueFormattedNotification(QUEUE_WARNING, kodi::GetLocalizedString(30307).c_str(), title.c_str()); // Canceling conflicting recording: %s
+      kodi::QueueFormattedNotification(QUEUE_WARNING, kodi::addon::GetLocalizedString(30307).c_str(), title.c_str()); // Canceling conflicting recording: %s
       m_control->CancelNextRecording((int)cardid, true);
     }
     else // LIVETV_CONFLICT_STRATEGY_STOPTV
     {
-      kodi::QueueFormattedNotification(QUEUE_WARNING, kodi::GetLocalizedString(30308).c_str(), title.c_str()); // Stopping Live TV due to conflicting recording: %s
+      kodi::QueueFormattedNotification(QUEUE_WARNING, kodi::addon::GetLocalizedString(30308).c_str(), title.c_str()); // Stopping Live TV due to conflicting recording: %s
       m_stopTV = true; // that will close live stream as soon as possible
     }
   }
@@ -557,9 +557,9 @@ void PVRClientMythTV::PromptDeleteRecording(const MythProgramInfo &prog)
   if (IsPlaying() || prog.IsNull())
     return;
   std::string dispTitle = MakeProgramTitle(prog.Title(), prog.Subtitle());
-  if (kodi::gui::dialogs::YesNo::ShowAndGetInput(kodi::GetLocalizedString(122),
-          kodi::GetLocalizedString(19112), "", dispTitle,
-          "", kodi::GetLocalizedString(117)))
+  if (kodi::gui::dialogs::YesNo::ShowAndGetInput(kodi::addon::GetLocalizedString(122),
+          kodi::addon::GetLocalizedString(19112), "", dispTitle,
+          "", kodi::addon::GetLocalizedString(117)))
   {
     if (m_control->DeleteRecording(*(prog.GetPtr())))
       kodi::Log(ADDON_LOG_DEBUG, "%s: Deleted recording %s", __FUNCTION__, prog.UID().c_str());
@@ -1329,7 +1329,7 @@ PVR_ERROR PVRClientMythTV::DeleteAndForgetRecording(const kodi::addon::PVRRecord
   return PVR_ERROR_FAILED;
 }
 
-class ATTRIBUTE_HIDDEN PromptDeleteRecordingTask : public Task
+class ATTR_DLL_LOCAL PromptDeleteRecordingTask : public Task
 {
 public:
   PromptDeleteRecordingTask(PVRClientMythTV* pvr, const MythProgramInfo& prog)
@@ -1538,7 +1538,7 @@ PVR_ERROR PVRClientMythTV::GetRecordingEdl(const kodi::addon::PVRRecording& reco
   if (CMythSettings::GetEnableEDL() == ENABLE_EDL_DIALOG && !skpList.empty())
   {
     bool canceled = false;
-    if (!kodi::gui::dialogs::YesNo::ShowAndGetInput(kodi::GetLocalizedString(30110), kodi::GetLocalizedString(30111), canceled) && !canceled)
+    if (!kodi::gui::dialogs::YesNo::ShowAndGetInput(kodi::addon::GetLocalizedString(30110), kodi::addon::GetLocalizedString(30111), canceled) && !canceled)
       return PVR_ERROR_NO_ERROR;
   }
 
@@ -2233,7 +2233,7 @@ bool PVRClientMythTV::OpenLiveStream(const kodi::addon::PVRChannel& channel)
   }
   delete m_dummyStream;
   m_dummyStream = nullptr;
-  kodi::QueueNotification(QUEUE_WARNING, "", kodi::GetLocalizedString(30305)); // Channel unavailable
+  kodi::QueueNotification(QUEUE_WARNING, "", kodi::addon::GetLocalizedString(30305)); // Channel unavailable
   return false;
 }
 
@@ -2448,7 +2448,7 @@ bool PVRClientMythTV::OpenRecordedStream(const kodi::addon::PVRRecording& record
     // Request the stream from our master using the opened event handler.
     m_recordingStream = new Myth::RecordingPlayback(*m_eventHandler);
     if (!m_recordingStream->IsOpen())
-      kodi::QueueNotification(QUEUE_ERROR, "", kodi::GetLocalizedString(30302)); // MythTV backend unavailable
+      kodi::QueueNotification(QUEUE_ERROR, "", kodi::addon::GetLocalizedString(30302)); // MythTV backend unavailable
     else if (m_recordingStream->OpenTransfer(prog.GetPtr()))
     {
       m_recordingStreamInfo = prog;
@@ -2496,7 +2496,7 @@ bool PVRClientMythTV::OpenRecordedStream(const kodi::addon::PVRRecording& record
     kodi::Log(ADDON_LOG_INFO, "%s: Connect to remote backend %s:%u", __FUNCTION__, backend_addr.c_str(), backend_port);
     m_recordingStream = new Myth::RecordingPlayback(backend_addr, backend_port);
     if (!m_recordingStream->IsOpen())
-      kodi::QueueNotification(QUEUE_ERROR, "", kodi::GetLocalizedString(30304)); // No response from MythTV backend
+      kodi::QueueNotification(QUEUE_ERROR, "", kodi::addon::GetLocalizedString(30304)); // No response from MythTV backend
     else if (m_recordingStream->OpenTransfer(prog.GetPtr()))
     {
       m_recordingStreamInfo = prog;
@@ -2638,7 +2638,7 @@ PVR_ERROR PVRClientMythTV::CallEPGMenuHook(const kodi::addon::PVRMenuhook& menuh
   }
   else
   {
-    kodi::QueueNotification(QUEUE_WARNING, "", kodi::GetLocalizedString(30312));
+    kodi::QueueNotification(QUEUE_WARNING, "", kodi::addon::GetLocalizedString(30312));
     kodi::Log(ADDON_LOG_DEBUG, "%s: EPG program not found (%d) chanid: %u attime: %lu", __FUNCTION__, tag.GetUniqueBroadcastId(), chanid, attime);
     return PVR_ERROR_INVALID_PARAMETERS;
   }
@@ -2675,7 +2675,7 @@ PVR_ERROR PVRClientMythTV::CallRecordingMenuHook(const kodi::addon::PVRMenuhook&
     {
       if (m_control->UndeleteRecording(*(it->second.GetPtr())))
       {
-        std::string info = kodi::GetLocalizedString(menuhook.GetLocalizedStringId());
+        std::string info = kodi::addon::GetLocalizedString(menuhook.GetLocalizedStringId());
         info.append(": ").append(it->second.Title());
         kodi::QueueNotification(QUEUE_INFO, "", info);
         return PVR_ERROR_NO_ERROR;
@@ -2792,9 +2792,9 @@ PVR_ERROR PVRClientMythTV::CallTimerMenuHook(const kodi::addon::PVRMenuhook& men
   {
     bool flag = m_scheduleManager->ToggleShowNotRecording();
     HandleScheduleChange();
-    std::string info = (flag ? kodi::GetLocalizedString(30310) : kodi::GetLocalizedString(30311)); //Enabled / Disabled
+    std::string info = (flag ? kodi::addon::GetLocalizedString(30310) : kodi::addon::GetLocalizedString(30311)); //Enabled / Disabled
     info += ": ";
-    info += kodi::GetLocalizedString(30421); //Show/hide rules with status 'Not Recording'
+    info += kodi::addon::GetLocalizedString(30421); //Show/hide rules with status 'Not Recording'
     kodi::QueueNotification(QUEUE_INFO, "", info);
     return PVR_ERROR_NO_ERROR;
   }
diff --git a/src/pvrclient-mythtv.h b/src/pvrclient-mythtv.h
index 6ee0c3d8..d5236a66 100644
--- a/src/pvrclient-mythtv.h
+++ b/src/pvrclient-mythtv.h
@@ -28,10 +28,10 @@
 class FileStreaming;
 class TaskHandler;
 
-class ATTRIBUTE_HIDDEN PVRClientMythTV : public kodi::addon::CInstancePVRClient, public Myth::EventSubscriber
+class ATTR_DLL_LOCAL PVRClientMythTV : public kodi::addon::CInstancePVRClient, public Myth::EventSubscriber
 {
 public:
-  PVRClientMythTV(KODI_HANDLE instance, const std::string& version);
+  PVRClientMythTV(const kodi::addon::IInstanceInfo& instance);
   virtual ~PVRClientMythTV();
 
   // Server
diff --git a/src/settings.cpp b/src/settings.cpp
index 88f32a5c..3eac043c 100644
--- a/src/settings.cpp
+++ b/src/settings.cpp
@@ -52,7 +52,7 @@ bool CMythSettings::Load()
   kodi::Log(ADDON_LOG_DEBUG, "Loading settings...");
 
   /* Read setting "host" from settings.xml */
-  if (!kodi::CheckSettingString("host", m_szMythHostname))
+  if (!kodi::addon::CheckSettingString("host", m_szMythHostname))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'host' setting, falling back to '%s' as default", DEFAULT_HOST);
@@ -60,7 +60,7 @@ bool CMythSettings::Load()
   }
 
   /* Read setting "port" from settings.xml */
-  if (!kodi::CheckSettingInt("port", m_iProtoPort))
+  if (!kodi::addon::CheckSettingInt("port", m_iProtoPort))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'port' setting, falling back to '%d' as default", DEFAULT_PROTO_PORT);
@@ -68,7 +68,7 @@ bool CMythSettings::Load()
   }
 
   /* Read setting "wsport" from settings.xml */
-  if (!kodi::CheckSettingInt("wsport", m_iWSApiPort))
+  if (!kodi::addon::CheckSettingInt("wsport", m_iWSApiPort))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'wsport' setting, falling back to '%d' as default", DEFAULT_WSAPI_PORT);
@@ -76,7 +76,7 @@ bool CMythSettings::Load()
   }
 
   /* Read setting "wssecuritypin" from settings.xml */
-  if (!kodi::CheckSettingString("wssecuritypin", m_szWSSecurityPin))
+  if (!kodi::addon::CheckSettingString("wssecuritypin", m_szWSSecurityPin))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'wssecuritypin' setting, falling back to '%s' as default", DEFAULT_WSAPI_SECURITY_PIN);
@@ -84,7 +84,7 @@ bool CMythSettings::Load()
   }
 
   /* Read setting "extradebug" from settings.xml */
-  if (!kodi::CheckSettingBoolean("extradebug", m_bExtraDebug))
+  if (!kodi::addon::CheckSettingBoolean("extradebug", m_bExtraDebug))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'extradebug' setting, falling back to '%u' as default", DEFAULT_EXTRA_DEBUG);
@@ -92,7 +92,7 @@ bool CMythSettings::Load()
   }
 
   /* Read setting "LiveTV" from settings.xml */
-  if (!kodi::CheckSettingBoolean("livetv", m_bLiveTV))
+  if (!kodi::addon::CheckSettingBoolean("livetv", m_bLiveTV))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'livetv' setting, falling back to '%u' as default", DEFAULT_LIVETV);
@@ -100,7 +100,7 @@ bool CMythSettings::Load()
   }
 
   /* Read settings "Record livetv_conflict_method" from settings.xml */
-  if (!kodi::CheckSettingInt("livetv_conflict_strategy", m_iLiveTVConflictStrategy))
+  if (!kodi::addon::CheckSettingInt("livetv_conflict_strategy", m_iLiveTVConflictStrategy))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'livetv_conflict_method' setting, falling back to '%i' as default", DEFAULT_RECORD_TEMPLATE);
@@ -108,25 +108,25 @@ bool CMythSettings::Load()
   }
 
   /* Read settings "Record template" from settings.xml */
-  if (!kodi::CheckSettingInt("rec_template_provider", m_iRecTemplateType))
+  if (!kodi::addon::CheckSettingInt("rec_template_provider", m_iRecTemplateType))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'rec_template_provider' setting, falling back to '%i' as default", DEFAULT_RECORD_TEMPLATE);
     m_iRecTemplateType = DEFAULT_RECORD_TEMPLATE;
   }
   /* Get internal template settings */
-  m_bRecAutoMetadata = kodi::GetSettingBoolean("rec_autometadata", true);
-  m_bRecAutoCommFlag = kodi::GetSettingBoolean("rec_autocommflag", false);
-  m_bRecAutoTranscode = kodi::GetSettingBoolean("rec_autotranscode", false);
-  m_bRecAutoRunJob1 = kodi::GetSettingBoolean("rec_autorunjob1", false);
-  m_bRecAutoRunJob2 = kodi::GetSettingBoolean("rec_autorunjob2", false);
-  m_bRecAutoRunJob3 = kodi::GetSettingBoolean("rec_autorunjob3", false);
-  m_bRecAutoRunJob4 = kodi::GetSettingBoolean("rec_autorunjob4", false);
-  m_bRecAutoExpire = kodi::GetSettingBoolean("rec_autoexpire", false);
-  m_iRecTranscoder = kodi::GetSettingInt("rec_transcoder", 0);
+  m_bRecAutoMetadata = kodi::addon::GetSettingBoolean("rec_autometadata", true);
+  m_bRecAutoCommFlag = kodi::addon::GetSettingBoolean("rec_autocommflag", false);
+  m_bRecAutoTranscode = kodi::addon::GetSettingBoolean("rec_autotranscode", false);
+  m_bRecAutoRunJob1 = kodi::addon::GetSettingBoolean("rec_autorunjob1", false);
+  m_bRecAutoRunJob2 = kodi::addon::GetSettingBoolean("rec_autorunjob2", false);
+  m_bRecAutoRunJob3 = kodi::addon::GetSettingBoolean("rec_autorunjob3", false);
+  m_bRecAutoRunJob4 = kodi::addon::GetSettingBoolean("rec_autorunjob4", false);
+  m_bRecAutoExpire = kodi::addon::GetSettingBoolean("rec_autoexpire", false);
+  m_iRecTranscoder = kodi::addon::GetSettingInt("rec_transcoder", 0);
 
   /* Read setting "tunedelay" from settings.xml */
-  if (!kodi::CheckSettingInt("tunedelay", m_iTuneDelay))
+  if (!kodi::addon::CheckSettingInt("tunedelay", m_iTuneDelay))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'tunedelay' setting, falling back to '%d' as default", DEFAULT_TUNE_DELAY);
@@ -134,10 +134,10 @@ bool CMythSettings::Load()
   }
 
   /* Read setting "host_ether" from settings.xml */
-  m_szMythHostEther = kodi::GetSettingString("host_ether", "");
+  m_szMythHostEther = kodi::addon::GetSettingString("host_ether", "");
 
   /* Read settings "group_recordings" from settings.xml */
-  if (!kodi::CheckSettingInt("group_recordings", m_iGroupRecordings))
+  if (!kodi::addon::CheckSettingInt("group_recordings", m_iGroupRecordings))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'group_recordings' setting, falling back to '%i' as default", GROUP_RECORDINGS_ALWAYS);
@@ -145,7 +145,7 @@ bool CMythSettings::Load()
   }
 
   /* Read setting "use_airdate" from settings.xml */
-  if (!kodi::CheckSettingBoolean("use_airdate", m_bUseAirdate))
+  if (!kodi::addon::CheckSettingBoolean("use_airdate", m_bUseAirdate))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'use_airdate' setting, falling back to '%u' as default", DEFAULT_USE_AIRDATE);
@@ -153,7 +153,7 @@ bool CMythSettings::Load()
   }
 
   /* Read setting "enable_edl" from settings.xml */
-  if (!kodi::CheckSettingInt("enable_edl", m_iEnableEDL))
+  if (!kodi::addon::CheckSettingInt("enable_edl", m_iEnableEDL))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'enable_edl' setting, falling back to '%i' as default", ENABLE_EDL_ALWAYS);
@@ -161,7 +161,7 @@ bool CMythSettings::Load()
   }
 
   /* Read setting "allow_shutdown" from settings.xml */
-  if (!kodi::CheckSettingBoolean("allow_shutdown", m_bAllowMythShutdown))
+  if (!kodi::addon::CheckSettingBoolean("allow_shutdown", m_bAllowMythShutdown))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'allow_shutdown' setting, falling back to '%u' as default", DEFAULT_ALLOW_SHUTDOWN);
@@ -169,7 +169,7 @@ bool CMythSettings::Load()
   }
 
   /* Read setting "channel_icons" from settings.xml */
-  if (!kodi::CheckSettingBoolean("channel_icons", m_bChannelIcons))
+  if (!kodi::addon::CheckSettingBoolean("channel_icons", m_bChannelIcons))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'channel_icons' setting, falling back to '%u' as default", DEFAULT_CHANNEL_ICONS);
@@ -177,7 +177,7 @@ bool CMythSettings::Load()
   }
 
   /* Read setting "recording_icons" from settings.xml */
-  if (!kodi::CheckSettingBoolean("recording_icons", m_bRecordingIcons))
+  if (!kodi::addon::CheckSettingBoolean("recording_icons", m_bRecordingIcons))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'recording_icons' setting, falling back to '%u' as default", DEFAULT_RECORDING_ICONS);
@@ -185,7 +185,7 @@ bool CMythSettings::Load()
   }
 
   /* Read setting "limit_tune_attempts" from settings.xml */
-  if (!kodi::CheckSettingBoolean("limit_tune_attempts", m_bLimitTuneAttempts))
+  if (!kodi::addon::CheckSettingBoolean("limit_tune_attempts", m_bLimitTuneAttempts))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'limit_tune_attempts' setting, falling back to '%u' as default", DEFAULT_LIMIT_TUNE_ATTEMPTS);
@@ -193,7 +193,7 @@ bool CMythSettings::Load()
   }
 
   /* Read setting "inactive_upcomings" from settings.xml */
-  if (!kodi::CheckSettingBoolean("inactive_upcomings", m_bShowNotRecording))
+  if (!kodi::addon::CheckSettingBoolean("inactive_upcomings", m_bShowNotRecording))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'inactive_upcomings' setting, falling back to '%u' as default", DEFAULT_SHOW_NOT_RECORDING);
@@ -201,7 +201,7 @@ bool CMythSettings::Load()
   }
 
   /* Read setting "prompt_delete" from settings.xml */
-  if (!kodi::CheckSettingBoolean("prompt_delete", m_bPromptDeleteAtEnd))
+  if (!kodi::addon::CheckSettingBoolean("prompt_delete", m_bPromptDeleteAtEnd))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'prompt_delete' setting, falling back to '%u' as default", DEFAULT_PROMPT_DELETE);
@@ -209,7 +209,7 @@ bool CMythSettings::Load()
   }
 
   /* Read setting "livetv_recordings" from settings.xml */
-  if (!kodi::CheckSettingBoolean("livetv_recordings", m_bLiveTVRecordings))
+  if (!kodi::addon::CheckSettingBoolean("livetv_recordings", m_bLiveTVRecordings))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'livetv_recordings' setting, falling back to '%u' as default", DEFAULT_LIVETV_RECORDINGS);
@@ -217,7 +217,7 @@ bool CMythSettings::Load()
   }
 
   /* Read setting "backend_bookmarks" from settings.xml */
-  if (!kodi::CheckSettingBoolean("backend_bookmarks", m_bUseBackendBookmarks))
+  if (!kodi::addon::CheckSettingBoolean("backend_bookmarks", m_bUseBackendBookmarks))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'backend_bookmarks' setting, falling back to '%u' as default", DEFAULT_BACKEND_BOOKMARKS);
@@ -225,7 +225,7 @@ bool CMythSettings::Load()
   }
 
   /* Read setting "root_default_group" from settings.xml */
-  if (!kodi::CheckSettingBoolean("root_default_group", m_bRootDefaultGroup))
+  if (!kodi::addon::CheckSettingBoolean("root_default_group", m_bRootDefaultGroup))
   {
     /* If setting is unknown fallback to defaults */
     kodi::Log(ADDON_LOG_ERROR, "Couldn't get 'root_default_group' setting, falling back to '%u' as default", DEFAULT_ROOT_DEFAULT_GROUP);
@@ -234,7 +234,7 @@ bool CMythSettings::Load()
 
   /* Read setting "damaged_color" from settings.xml */
   std::string buffer;
-  if (kodi::CheckSettingString("damaged_color", buffer))
+  if (kodi::addon::CheckSettingString("damaged_color", buffer))
   {
     std::regex rgx("^\\[COLOR\\ .*\\](.*)\\[\\/COLOR\\]");
     std::smatch match;
@@ -257,7 +257,7 @@ bool CMythSettings::Load()
 
 ADDON_STATUS CMythSettings::SetSetting(PVRClientMythTV& client,
                                        const std::string& settingName,
-                                       const kodi::CSettingValue& settingValue)
+                                       const kodi::addon::CSettingValue& settingValue)
 {
   if (settingName == "host")
   {
diff --git a/src/settings.h b/src/settings.h
index 6137a270..70330780 100644
--- a/src/settings.h
+++ b/src/settings.h
@@ -60,7 +60,7 @@ class CMythSettings
   CMythSettings() = default;
 
   bool Load();
-  ADDON_STATUS SetSetting(PVRClientMythTV& client, const std::string& settingName, const kodi::CSettingValue& settingValue);
+  ADDON_STATUS SetSetting(PVRClientMythTV& client, const std::string& settingName, const kodi::addon::CSettingValue& settingValue);
 
   static bool GetExtraDebug() { return m_bExtraDebug; }
   static const std::string& GetMythHostname() { return m_szMythHostname; }
diff --git a/src/taskhandler.h b/src/taskhandler.h
index 48baeb25..ca27a953 100644
--- a/src/taskhandler.h
+++ b/src/taskhandler.h
@@ -22,7 +22,7 @@ class Task
 
 class TaskHandlerPrivate;
 
-class ATTRIBUTE_HIDDEN TaskHandler
+class ATTR_DLL_LOCAL TaskHandler
 {
 public:
   TaskHandler();
